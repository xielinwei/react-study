---
description: 
globs: 
alwaysApply: true
---

# 通用代码规范
适用于所有项目的通用 ESLint 和 Prettier 配置规则。

### 基础配置
- **缩进**: 使用 2 个空格，不使用 tab
- **分号**: 不使用分号，仅在语法可能出现错误时才添加
- **引号**: 使用单引号，JSX 中使用双引号
- **行宽**: 一行最多 100 个字符
- **换行符**: 使用 LF (Unix) 换行符
- **大括号**: 大括号内首尾需要空格
- **箭头函数**: 参数始终使用括号

## 通用 ESLint 规则

### 基础规则
- **缩进**: 2 个空格，switch case 使用 1 个空格
- **分号**: 关闭分号检查
- **函数空格**: 函数括号前不加空格
- **换行符**: 强制使用 unix 换行符
- **逗号**: 禁止使用拖尾逗号

## 代码编写原则

### KISS 原则
- 保持代码简单明了，避免过度设计
- 优先选择简单直接的解决方案
- 避免不必要的复杂抽象

### SOLID 原则
- **单一职责**: 每个函数/类只负责一个功能
- **开闭原则**: 对扩展开放，对修改关闭  
- **里氏替换**: 子类可以替换父类使用
- **接口隔离**: 不依赖不需要的接口
- **依赖倒置**: 依赖抽象而非具体实现

### 最佳实践
- 优先使用项目现有组件库和基础库
- 避免重复代码，提取公共逻辑
- 常量应放在文件顶部或专门的常量文件中
- 不引入不必要的依赖
- 代码行数小于1000行
- 圈复杂度小于15
- 复杂逻辑必须添加注释
- 代码实现后进行基本逻辑自检

## 逻辑规范
- 禁止在代码中直接使用未定义的数值常量
- 禁止在 if 语句中直接使用复杂的布尔表达式
- 必须将复杂条件提取为具名布尔变量或函数
- 单个条件判断不应超过 3 个逻辑运算符

## 命名规范

### 变量命名
- 使用有意义的变量名，避免缩写
- 布尔值使用 `is`/`has`/`can` 等前缀
- 常量使用大写字母和下划线
- 私有变量/方法使用下划线前缀
- 未使用的变量使用下划线前缀

### 函数命名
- 使用动词开头，描述函数功能
- 事件处理函数使用 `handle` 或 `on` 前缀
- 工具函数使用清晰的动词描述

## 注释规范
- 复杂业务逻辑必须添加注释说明
- 函数/方法添加 JSDoc 注释
- 所有 AI 生成的代码块，必须在代码前加上注释：// generated by ai
- 该规则始终生效，适用于所有 AI 生成方式（chat、command+k、tab 补全等）
- TODO/FIXME 注释标明责任人和时间
- 注释应说明"为什么这么做"，而非"做了什么"
- 避免显而易见的无意义注释

## 错误处理
- 使用 try-catch 处理可能的异常
- 提供有意义的错误信息
- 记录错误日志便于调试
- 实现优雅降级处理


