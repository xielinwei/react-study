---
description: 
globs: *.jsx,*.tsx
alwaysApply: false
---
# React 规则

## 项目结构
```tree
├── CHANGELOG.md                  // [生成] 更新日志
├── README.md                     // [必选] 导读
├── config                        // [可选] 配置目录
│   ├── config.js                 // [生成] 基本配置
│   └── router.config.js          // [必填] 路由
├── dist                          // [生成] 打包目录
├── docs                          // [可选] 文档
├── mock                          // [可选] mock 数据
│   └── sample.js                 // [可选] demo
├── package.json                  // [必选] 大家都懂
├── public                        // [必选] 不会被webpack编译的资源
└── src                           // [必选] 开发目录
    ├── app.js                    // [必选] 运行时配置文件
    ├── assets                    // [可选] 公共资源（被项目引用的经过webpack处理的资源）
    ├── components                // [必选] 业务组件必须写在这里
    ├── global.jsx                // [必选] 全局执行入口
    ├── global.less               // [必选] 需要重置的样式或者全局样式引用
    ├── layouts                   // [可选] 基本的布局封装
    ├── models                    // [可选] 对异步数据处理
    ├── pages                     // [必选] 页面组件，不允许有其他类型组件混入
    ├── services                  // [必选] 业务接口封装
    └── utils                     // [可选] 工具库（用于一些函数方法之类的库）
```


## 文件命名规范

### 组件文件命名
- 使用 PascalCase 命名组件文件
- 页面组件以 `Page` 结尾
- 基础组件以 `Base` 开头
- 高阶组件以 `with` 开头
- 紧密耦合的组件以父组件名作为前缀

### 目录结构
- 页面组件放在 `src/pages` 目录下
- 公共组件放在 `src/components` 目录下
- 布局组件放在 `src/layouts` 目录下
- 工具函数放在 `src/utils` 目录下
- API 接口放在 `src/services` 目录下

## 组件开发规范

### 组件结构
```tsx
import React from 'react'
import { useCallback, useState } from 'react'
import styles from './ComponentName.module.scss'

interface Props {
  // props 类型定义
}

const ComponentName: React.FC<Props> = ({ prop1, prop2 }) => {
  // hooks 声明
  const [state, setState] = useState()

  // 事件处理函数
  const handleEvent = useCallback(() => {
    // 处理逻辑
  }, [])

  return (
    <div className={styles.container}>
      {/* JSX 内容 */}
    </div>
  )
}

export default ComponentName
```

### Props 定义
- 使用 TypeScript 接口定义 Props
- 必须指定类型
- 使用 camelCase 命名
- 可选属性使用 `?` 标记
- 使用 children 属性传递子组件

### 状态管理
- 使用 useState 管理组件内部状态
- 使用 useReducer 管理复杂状态
- 使用 Context 管理全局状态
- 使用 Redux/Mobx 管理应用状态

### 样式规范
- **必须使用 CSS Modules 形式**，文件命名为 `ComponentName.module.scss`
- 使用 BEM 命名规范
- 避免使用内联样式
- 使用变量管理主题
- 样式文件与组件文件放在同一目录下

#### 样式文件组织示例
```
components/
├── Button/
│   ├── Button.tsx
│   ├── Button.module.scss
│   └── index.ts
└── Modal/
    ├── Modal.tsx
    ├── Modal.module.scss
    └── index.ts
```

#### CSS Modules 使用示例
```scss
// Button.module.scss
.container {
  display: flex;
  align-items: center;
  
  &--primary {
    background-color: #007bff;
    color: white;
  }
  
  &--disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

.text {
  font-size: 14px;
  font-weight: 500;
}
```

```tsx
// Button.tsx
import styles from './Button.module.scss'

const Button = ({ primary, disabled, children }) => {
  return (
    <button 
      className={`${styles.container} ${primary ? styles['container--primary'] : ''} ${disabled ? styles['container--disabled'] : ''}`}
    >
      <span className={styles.text}>{children}</span>
    </button>
  )
}
```

## 代码风格

### JSX
- 组件名使用 PascalCase
- 属性名使用 camelCase
- 使用自闭合标签
- 使用条件渲染代替三元运算符
- 使用 Fragment 包裹多个元素

### Hooks 使用规范
- 只在最顶层使用 Hooks
- 只在函数组件中使用 Hooks
- 自定义 Hook 以 use 开头
- 使用 useCallback 和 useMemo 优化性能
- 使用 useEffect 处理副作用

### TypeScript
- 使用类型注解
- 使用接口定义数据结构
- 使用泛型增加代码复用性
- 使用类型断言谨慎处理

### 注释规范
- 组件必须包含功能说明
- 复杂逻辑必须添加注释
- 使用 JSDoc 注释格式
- 关键算法需要详细注释

## 性能优化

### 代码层面
- 使用 React.memo 优化渲染
- 使用 useMemo 缓存计算结果
- 使用 useCallback 缓存函数
- 使用虚拟列表处理长列表
- 使用懒加载优化首屏加载

### 资源优化
- 图片资源压缩
- 使用懒加载
- 合理使用 CDN
- 代码分割
- 使用 Tree Shaking
