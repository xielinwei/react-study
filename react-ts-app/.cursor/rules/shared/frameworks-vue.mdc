---
description: 
globs: *.vue
alwaysApply: false
---

# Vue 规则
## 项目结构
```tree
├── src                         // [必选] 开发目录
│    ├── views                  // [必选] 页面组件，不允许有其他类型组件混入
│    ├── components             // [必选] 业务组件必须写在这里
│    ├── libs                   // [可选] 公共库（一般用于对一些库的封装）
│    ├── utils                  // [可选] 工具库（用于一些函数方法之类的库）
│    ├── assets                 // [可选] 公共资源（被项目引用的经过webpack处理的资源）
│    ├── store                  // [可选] 数据存储 vuex
│    ├── route                  // [可选] 路由
│    ├── style                  // [可选] 公共样式
│    ├── App.vue                // [必选] 根组件
│    └── main.(js|ts)           // [必选] 入口文件
├── public                      // [必选] 不会被webpack编译的资源
│    ├── index.html             // [必选] 模板
│    └── logo.png               // [可选] 项目 logo
├── config                      // [可选] 配置目录
├── mock                        // [可选] mock 数据
├── test                        // [可选] 测试代码
├── docs                        // [可选] 文档
│── .gitignore                  // [必选] git 忽略的文件
│── .editorconfig               // [必选] 编译器配置
│── .npmignore                  // [可选] 如果是 npm 包是必选
│── jsconfig.json               // [可选] 用于 vscode 配置
├── README.md                   // [必选] 导读
├── package.json                // [必选] 
```

## 文件命名规范

### 组件文件命名
- 使用 PascalCase 命名组件文件
- 页面组件以 `Page` 结尾
- 基础组件以 `Base` 开头
- 单例组件以 `The` 开头
- 紧密耦合的组件以父组件名作为前缀

## 组件开发规范

### 组件结构
```vue
<template>
  <div class="component-name">
    <!-- 模板内容 -->
  </div>
</template>

<script>
export default {
  name: 'ComponentName',
  // 组件选项
}
</script>

<style lang="scss" scoped>
.component-name {
  // 样式内容
}
</style>
```

## 代码风格

### Props 定义
- 必须指定类型
- 必须指定默认值
- 使用 camelCase 命名
- 布尔类型的 prop 必须指定默认值

### 事件命名
- 使用 kebab-case 命名
- 以 `on` 开头
- 使用动词或动词+名词

### 样式规范
- 使用 scoped 样式
- 使用 BEM 命名规范
- 避免使用 !important
- 使用变量管理颜色和尺寸

### 模板
- 组件名使用 PascalCase
- 属性名使用 kebab-case
- 使用 v-for 时必须指定 key
- 避免 v-if 和 v-for 同时使用
- 避免在模板中使用复杂表达式
- 合理使用计算属性和方法

### JavaScript/TypeScript
- 使用 ES6+ 语法
- 使用 TypeScript 类型注解
- 使用 async/await 处理异步
- 使用解构赋值
- 使用箭头函数

### 注释规范
- 组件必须包含功能说明
- 复杂逻辑必须添加注释
- 使用 JSDoc 注释格式

#### 样式规范
- 使用 scoped 样式避免污染
- 合理使用 CSS Modules
- 优先使用package.json中对应的预处理器，如果不存在统一使用预处理器 Sass

## 性能优化

### 代码层面
- 合理使用 computed 和 watch
- 避免不必要的组件渲染
- 使用 v-show 代替 v-if（频繁切换）
- 使用 keep-alive 缓存组件

### 资源优化
- 图片资源压缩
- 使用懒加载
- 合理使用 CDN
- 代码分割

## 最佳实践

### 状态管理
- 使用 Vuex 管理全局状态
- 模块化管理状态
- 使用 mapState、mapGetters 等辅助函数

### 路由管理
- 路由懒加载
- 路由守卫合理使用
- 路由参数验证

### 错误处理
- 全局错误处理
- 组件错误边界
- 友好的错误提示
