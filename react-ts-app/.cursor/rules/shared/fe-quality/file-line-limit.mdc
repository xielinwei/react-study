---
description: 
globs: 
alwaysApply: true
---
# 前端代码质量规范 - 文件行数控制

## 核心规则：单文件代码行数限制

**严格要求：单个文件代码行数不得超过 1000 行**

当检测到文件行数超过阈值时，必须立即进行代码重构优化。

## 文件行数检测与优化策略

### 1. Vue 组件文件优化 (.vue)

当 Vue 组件超过 1000 行时，优先采用以下策略：

#### a) 组件拆分策略
- **提取子组件**：将复杂的 template 部分拆分为独立的子组件
- **功能模块分离**：按业务逻辑将大组件拆分为多个功能组件
- **抽象通用组件**：将可复用的 UI 部分提取为通用组件

#### b) 逻辑分离策略
- **Composition API 重构**：使用 Vue 2.7 的 Composition API 将相关逻辑分组
- **Mixin 抽取**：将通用逻辑抽取为 mixin（但优先使用 Composition API）
- **工具函数提取**：将纯函数逻辑移至 `src/utils/` 目录

#### c) 样式分离策略
- **独立样式文件**：将大量样式代码移至独立的 `.scss` 文件
- **样式模块化**：使用 CSS Modules 或 scoped 样式避免冗余

### 2. TypeScript 文件优化 (.ts, .tsx)

#### a) 模块化拆分
- **按功能拆分**：将大型工具文件按功能模块拆分
- **常量提取**：将常量定义移至独立的 `constants.ts` 文件
- **类型定义分离**：将复杂类型定义移至 `src/types/` 目录

#### b) 类和接口优化
- **单一职责原则**：确保每个类只负责一个核心功能
- **接口隔离**：将大型接口拆分为多个小接口

### 3. 特定文件类型处理

#### 路由文件 (router/index.ts)
- **路由分组**：按模块拆分路由配置

#### 状态管理 (store/)
- **Actions/Mutations 分离**：将复杂逻辑分离到独立文件

## 自动优化触发条件

在以下情况下主动进行代码重构：

1. **新增代码导致文件超过 750 行**：预警提示
2. **文件超过 1000 行**：拒绝继续添加代码，要求立即重构

## 重构优先级

### 高优先级重构
1. **组件拆分**：将单个大组件拆分为多个小组件
2. **逻辑提取**：将业务逻辑提取到 composables 或 hooks
3. **常量分离**：提取魔法数字和字符串常量

### 中优先级重构
1. **样式分离**：将大量样式代码分离
2. **工具函数提取**：提取可复用的工具函数
3. **类型定义优化**：简化复杂的类型定义

### 低优先级重构
1. **注释优化**：减少冗余注释，提高代码可读性
2. **代码格式化**：统一代码风格和格式

## 重构实施指导

### 执行步骤
1. **分析当前文件结构**：识别可拆分的模块
2. **制定拆分计划**：确定拆分策略和目标文件结构
3. **逐步重构**：分批次进行代码移动和重构
4. **测试验证**：确保功能完整性和性能

### 质量检查
- 重构后每个文件不超过 1000 行
- 保持原有功能完整性
- 确保代码可读性和可维护性

## 特殊情况处理

### 可接受的例外情况
1. **配置文件**：如 webpack 配置、路由配置等
2. **自动生成文件**：工具自动生成的代码文件
3. **第三方库定义文件**：.d.ts 类型定义文件

### 例外申请流程
当确实无法拆分时，需要：
1. 详细说明无法拆分的技术原因
2. 提供替代的代码优化方案
3. 记录例外情况和处理方案

---

**执行原则**：始终优先保证代码质量和可维护性，通过合理的架构设计避免单文件过大的问题。 
